package com.sample
import javax.swing.*;
import java.util.ArrayList;

global JFrame frame;

declare Question
    question: String
    answer: String
end

rule "Ask about action"
    when
    then
        GUI.initWindow(frame);
        Question question = new Question();
        question.setQuestion(questions(1));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about Terminator"
    when
        Question(question == questions(1), answer == "Yes")
    then
        Question question = new Question();
        question.setQuestion(questions(2));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about war movie"
    when
        Question(question == questions(2), answer == "No")
    then
        Question question = new Question();
        question.setQuestion(questions(4));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about Horses..."
    when
        Question(question == questions(4), answer == "No")
    then
        Question question = new Question();
        question.setQuestion(questions(5));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about oldschool"
    when
        Question(question == questions(5), answer == "Yes")
    then
        Question question = new Question();
        question.setQuestion(questions(6));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Old");
        variants.add("Fresh");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about keeping serious"
    when
        Question(question == questions(5), answer == "No")
    then
        Question question = new Question();
        question.setQuestion(questions(7));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about future or present"
    when
        Question(question == questions(7), answer == "Yes")
    then
        Question question = new Question();
        question.setQuestion(questions(8));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Future");
        variants.add("Now");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about documentary"
    when
        Question(question == questions(1), answer == "No")
    then
        Question question = new Question();
        question.setQuestion(questions(3));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about snowboard"
    when
        Question(question == questions(3), answer == "Yes")
    then
        Question question = new Question();
        question.setQuestion(questions(9));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about maximum rock"
    when
        Question(question == questions(9), answer == "No")
    then
        Question question = new Question();
        question.setQuestion(questions(10));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about streets"
    when
        Question(question == questions(10), answer == "No")
    then
        Question question = new Question();
        question.setQuestion(questions(11));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about pain/paint"
    when
        Question(question == questions(11), answer == "Yes")
    then
        Question question = new Question();
        question.setQuestion(questions(12));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Pain");
        variants.add("Paint");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about religion"
    when
        Question(question == questions(11), answer == "No")
    then
        Question question = new Question();
        question.setQuestion(questions(13));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about Woody Allen"
    when
        Question(question == questions(13), answer == "No")
    then
        Question question = new Question();
        question.setQuestion(questions(14));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about subtitles"
    when
        Question(question == questions(14), answer == "No")
    then
        Question question = new Question();
        question.setQuestion(questions(15));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about monsters"
    when
        Question(question == questions(3), answer == "No")
    then
        Question question = new Question();
        question.setQuestion(questions(16));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about chainsaw"
    when
        Question(question == questions(16), answer == "Yes")
    then
        Question question = new Question();
        question.setQuestion(questions(17));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about 3 part classic"
    when
        Question(question == questions(17), answer == "No")
    then
        Question question = new Question();
        question.setQuestion(questions(18));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about abandoned asylums"
    when
        Question(question == questions(18), answer == "No")
    then
        Question question = new Question();
        question.setQuestion(questions(19));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about mood to laugh"
    when
        Question(question == questions(16), answer == "No")
    then
        Question question = new Question();
        question.setQuestion(questions(20));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about drama"
    when
        Question(question == questions(20), answer == "Yes")
    then
        Question question = new Question();
        question.setQuestion(questions(21));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about singing"
    when
        Question(question == questions(21), answer == "No")
    then
        Question question = new Question();
        question.setQuestion(questions(22));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about clever wordplay"
    when
        Question(question == questions(22), answer == "No")
    then
        Question question = new Question();
        question.setQuestion(questions(23));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about black and white"
    when
        Question(question == questions(21), answer == "Yes")
    then
        Question question = new Question();
        question.setQuestion(questions(24));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about Paul Newman"
    when
        Question(question == questions(24), answer == "Yes")
    then
        Question question = new Question();
        question.setQuestion(questions(25));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about great/legendary"
    when
        Question(question == questions(25), answer == "Yes")
    then
        Question question = new Question();
        question.setQuestion(questions(26));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Great");
        variants.add("Legend");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about gritty/preety"
    when
        Question(question == questions(25), answer == "No")
    then
        Question question = new Question();
        question.setQuestion(questions(27));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Pretty");
        variants.add("Gritty");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about romantic indie"
    when
        Question(question == questions(25), answer == "Pretty")
    then
        Question question = new Question();
        question.setQuestion(questions(28));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about adventure"
    when
        Question(question == questions(20), answer == "No")
    then
        Question question = new Question();
        question.setQuestion(questions(30));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about Firefly"
    when
        Question(question == questions(30), answer == "Yes")
    then
        Question question = new Question();
        question.setQuestion(questions(31));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about kids"
    when
        Question(question == questions(31), answer == "No")
    then
        Question question = new Question();
        question.setQuestion(questions(32));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about thrills"
    when
        Question(question == questions(32), answer == "Yes")
    then
        Question question = new Question();
        question.setQuestion(questions(31));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about criminal intent"
    when
        Question(question == questions(30), answer == "No")
    then
        Question question = new Question();
        question.setQuestion(questions(34));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about diatribes"
    when
        Question(question == questions(34), answer == "Yes")
    then
        Question question = new Question();
        question.setQuestion(questions(35));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about drugs"
    when
        Question(question == questions(35), answer == "No")
    then
        Question question = new Question();
        question.setQuestion(questions(36));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about hip hop"
    when
        Question(question == questions(36), answer == "No")
    then
        Question question = new Question();
        question.setQuestion(questions(37));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about mob story"
    when
        Question(question == questions(36), answer == "Yes")
    then
        Question question = new Question();
        question.setQuestion(questions(38));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about romance"
    when
        Question(question == questions(34), answer == "No")
    then
        Question question = new Question();
        question.setQuestion(questions(39));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about rape scene"
    when
        Question(question == questions(39), answer == "No")
    then
        Question question = new Question();
        question.setQuestion(questions(40));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about Girl with the Dragon Tattoo"
    when
        Question(question == questions(40), answer == "No")
    then
        Question question = new Question();
        question.setQuestion(questions(41));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about Girl Who Played with Fire"
    when
        Question(question == questions(41), answer == "Yes")
    then
        Question question = new Question();
        question.setQuestion(questions(42));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about being completely confused"
    when
        Question(question == questions(40), answer == "Yes")
    then
        Question question = new Question();
        question.setQuestion(questions(43));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about subtitles2"
    when
        Question(question == questions(43), answer == "No")
    then
        Question question = new Question();
        question.setQuestion(questions(44));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about keeping mellow"
    when
        Question(question == questions(44), answer == "Yes")
    then
        Question question = new Question();
        question.setQuestion(questions(45));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Yes");
        variants.add("No");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

rule "Ask about Tom/Matt"
    when
        Question(question == questions(39), answer == "Yes")
    then
        Question question = new Question();
        question.setQuestion(questions(46));
        ArrayList<String> variants = new ArrayList<>();
        variants.add("Tom");
        variants.add("Matt");
        String ans = GUI.askWindow(frame, question.getQuestion(), variants);
        question.setAnswer(ans);
        insert(question);
end

function String questions(int n) {
    switch(n) {
        case 1: return "Want your night to be action packed?";
        case 2: return "Have you seen The Terminator?";
        case 3: return "What about a documentary?";
        case 4: return "How about a war movie?";
        case 5: return "Horses, boots, and 10-galon hats?";
        case 6: return "You want to go oldschool or keep it fresh?";
        case 7: return "Do you want to keep it serious?";
        case 8: return "Set in the future or present day?";
        case 9: return "Do you consider snowboard films to be documentaries?";
        case 10: return "Do you want to have your face melted off reom maximum rock?";
        case 11: return "Take it to the streets?";
        case 12: return "Pain or Paint?";
        case 13: return "Do you want to see how ridiculous religion can be?";
        case 14: return "Are you Woody Allen fan? Or would you like to become one?";
        case 15: return "Do subtitels bother you?";
        case 16: return "Monsters, murderers and madness?";
        case 17: return "Should there be a blood-soaked chainsaw at some point?";
        case 18: return "Three parts clasic horror, one part something new?";
        case 19: return "Do abandoned asylums scare the sence uot you?";
        case 20: return "Are in the mood to laugh?";
        case 21: return "Do you want some drama with your laughter?";
        case 22: return "Do you mind if people break out singing?";
        case 23: return "Do you find clever wordplay entertaining?";
        case 24: return "Are you adverse to black and white?";
        case 25: return "Do you love Paul Newman? Do you want to?";
        case 26: return "Do you want to watch something great or legendary?";
        case 27: return "Gritty or pretty?";
        case 28: return "Slow-paced quirky romantic indie?";
        case 29: return "Do you like your humor to be more or less lewd?";
        case 30: return "Do you hunger for adventure?";
        case 31: return "Were you a fan of Firefly?";
        case 32: return "Do you like main rolls be played by kids?";
        case 33: return "Want some thrills with your adventure?";
        case 34: return "Care for some criminal intent?";
        case 35: return "Do you enjoy diatribes entirely unrelated to plot?";
        case 36: return "Are you upset by seeing drug use?";
        case 37: return "Do you love hip-hop?";
        case 38: return "Mob story?";
        case 39: return "Redy for some romance?";
        case 40: return "Hypothetically: would a long brutal rape scene ruin your night?";
        case 41: return "Have you seen the original Girl with the Dragon Tattoo?";
        case 42: return "Have you seen The Girl Who Played with Fire?";
        case 43: return "Do you want to be completely confused?";
        case 44: return "Are subtitels going to be a problem?";
        case 45: return "Keep it mellow?";
        case 46: return "Tom Cruise or Matt Damon?";
        default: return "";
    }
}

rule "Recommend Terminator 2"
    when
        Question(question == questions(2), answer == "Yes")
    then
        GUI.recommendWindow(frame, "Terminator 2: Judgement Day");
end

rule "Recommend Black Hawk Down"
    when
        Question(question == questions(4), answer == "Yes")
    then
        GUI.recommendWindow(frame, "Black Hawk Down");
end

rule "Recommend One Upon a Time in the West"
    when
        Question(question == questions(6), answer == "Old")
    then
        GUI.recommendWindow(frame, "One Upon a Time in the West");
end

rule "Recommend True Grit"
    when
        Question(question == questions(6), answer == "Fresh")
    then
        GUI.recommendWindow(frame, "True Grit");
end

rule "Recommend Top Gun"
    when
        Question(question == questions(7), answer == "No")
    then
        GUI.recommendWindow(frame, "Top Gun");
end

rule "Recommend Shooter"
    when
        Question(question == questions(8), answer == "Now")
    then
        GUI.recommendWindow(frame, "Shooter");
end

rule "Recommend Aeon Flux"
    when
        Question(question == questions(8), answer == "Future")
    then
        GUI.recommendWindow(frame, "Aeon Flux");
end

rule "Recommend Art of Flight"
    when
        Question(question == questions(9), answer == "Yes")
    then
        GUI.recommendWindow(frame, "Art of Flight");
end

rule "Recommend Year of the Horse"
    when
        Question(question == questions(10), answer == "Yes")
    then
        GUI.recommendWindow(frame, "Year of the Horse");
end

rule "Recommend Exit Through the Gift Shop"
    when
        Question(question == questions(12), answer == "Paint")
    then
        GUI.recommendWindow(frame, "Exit Through the Gift Shop");
end

rule "Recommend Bones Brigade: An Autobiography"
    when
        Question(question == questions(12), answer == "Pain")
    then
        GUI.recommendWindow(frame, "Bones Brigade: An Autobiography");
end

rule "Recommend Religulous"
    when
        Question(question == questions(13), answer == "Yes")
    then
        GUI.recommendWindow(frame, "Religulous");
end

rule "Recommend Woody Allen: A Documentary"
    when
        Question(question == questions(14), answer == "Yes")
    then
        GUI.recommendWindow(frame, "Woody Allen: A Documentary");
end

rule "Recommend Grizzly Man"
    when
        Question(question == questions(15), answer == "Yes")
    then
        GUI.recommendWindow(frame, "Grizzly Man");
end

rule "Recommend Man on Wire"
    when
        Question(question == questions(15), answer == "No")
    then
        GUI.recommendWindow(frame, "Man on Wire");
end

rule "Recommend The Evil Dead"
    when
        Question(question == questions(17), answer == "Yes")
    then
        GUI.recommendWindow(frame, "The Evil Dead");
end

rule "Recommend Cabin in the Woods"
    when
        Question(question == questions(18), answer == "Yes")
    then
        GUI.recommendWindow(frame, "Cabin in the Woods");
end

rule "Recommend Session 9"
    when
        Question(question == questions(19), answer == "Yes")
    then
        GUI.recommendWindow(frame, "Session 9");
end

rule "Recommend Insidious"
    when
        Question(question == questions(19), answer == "No")
    then
        GUI.recommendWindow(frame, "Insidious");
end

rule "Recommend Happy Glimore"
    when
        Question(question == questions(22), answer == "Yes")
    then
        GUI.recommendWindow(frame, "Happy Glimore");
end

rule "Recommend Duck Soup"
    when
        Question(question == questions(23), answer == "Yes")
    then
        GUI.recommendWindow(frame, "Duck Soup");
end

rule "Recommend Ferris Buller's Day Off"
    when
        Question(question == questions(23), answer == "No")
    then
        GUI.recommendWindow(frame, "Ferris Buller's Day Off");
end

rule "Recommend Butch Cassidy and the Sundance Kid"
    when
        Question(question == questions(26), answer == "Legend")
    then
        GUI.recommendWindow(frame, "Butch Cassidy and the Sundance Kid");
end

rule "Recommend Slap Shot"
    when
        Question(question == questions(26), answer == "Great")
    then
        GUI.recommendWindow(frame, "Slap Shot");
end

rule "Recommend Trainspotting"
    when
        Question(question == questions(27), answer == "Gritty")
    then
        GUI.recommendWindow(frame, "Trainspotting");
end

rule "Recommend Lost in Translation"
    when
        Question(question == questions(28), answer == "Yes")
    then
        GUI.recommendWindow(frame, "Lost in Translation");
end

rule "Recommend Big Fish"
    when
        Question(question == questions(28), answer == "No")
    then
        GUI.recommendWindow(frame, "Big Fish");
end

rule "Recommend Clerks"
    when
        Question(question == questions(29), answer == "More")
    then
        GUI.recommendWindow(frame, "Clerks");
end

rule "Recommend ManHattan"
    when
        Question(question == questions(29), answer == "Less")
    then
        GUI.recommendWindow(frame, "ManHattan");
end

rule "Recommend Sirenity"
    when
        Question(question == questions(31), answer == "Yes")
    then
        GUI.recommendWindow(frame, "Sirenity");
end

rule "Recommend Star Trek II"
    when
        Question(question == questions(32), answer == "No")
    then
        GUI.recommendWindow(frame, "Star Trek II: The Wrath og Khan");
end

rule "Recommend Super 8"
    when
        Question(question == questions(33), answer == "Yes")
    then
        GUI.recommendWindow(frame, "Super 8");
end

rule "Recommend The Hunger Games"
    when
        Question(question == questions(33), answer == "No")
    then
        GUI.recommendWindow(frame, "The Hunger Games");
end

rule "Recommend Resevior Dogs"
    when
        Question(question == questions(35), answer == "Yes")
    then
        GUI.recommendWindow(frame, "Resevior Dogs");
end

rule "Recommend Hustle & Flow"
    when
        Question(question == questions(37), answer == "Yes")
    then
        GUI.recommendWindow(frame, "Hustle & Flow");
end

rule "Recommend Traffic"
    when
        Question(question == questions(37), answer == "No")
    then
        GUI.recommendWindow(frame, "Traffic");
end

rule "Recommend Miller's Crossing"
    when
        Question(question == questions(38), answer == "Yes")
    then
        GUI.recommendWindow(frame, "Miller's Crossing");
end

rule "Recommend Clay Pigeons"
    when
        Question(question == questions(38), answer == "No")
    then
        GUI.recommendWindow(frame, "Clay Pigeons");
end

rule "Recommend The Girl with the Dragon Tattoo?"
    when
        Question(question == questions(41), answer == "No")
    then
        GUI.recommendWindow(frame, "The Girl with the Dragon Tattoo?");
end

rule "Recommend The Girl Who Played with Fire"
    when
        Question(question == questions(42), answer == "No")
    then
        GUI.recommendWindow(frame, "The Girl Who Played with Fire");
end

rule "Recommend The Girl who Kicked the Hornets' Nest"
    when
        Question(question == questions(42), answer == "Yes")
    then
        GUI.recommendWindow(frame, "The Girl who Kicked the Hornets' Nest");
end

rule "Recommend Pi"
    when
        Question(question == questions(43), answer == "Yes")
    then
        GUI.recommendWindow(frame, "Pi");
end

rule "Recommend Tomboy"
    when
        Question(question == questions(44), answer == "No")
    then
        GUI.recommendWindow(frame, "Tomboy");
end

rule "Recommend Midnight Cowboy"
    when
        Question(question == questions(45), answer == "Yes")
    then
        GUI.recommendWindow(frame, "Midnight Cowboy");
end

rule "Recommend The Machinist"
    when
        Question(question == questions(45), answer == "No")
    then
        GUI.recommendWindow(frame, "The Machinist");
end

rule "Recommend Vanilla Sky"
    when
        Question(question == questions(46), answer == "Tom")
    then
        GUI.recommendWindow(frame, "Vanilla Sky");
end

rule "Recommend Good Will Hunting"
    when
        Question(question == questions(46), answer == "Matt")
    then
        GUI.recommendWindow(frame, "Good Will Hunting");
end
